{"version":3,"sources":["components/card/cardWrap.js","components/info/infoWrap.js","App.js","serviceWorker.js","index.js"],"names":["CardWrap","props","sl","id","name","filter","icon","color","price","subName","result","tab","state","className","this","map","arg","key","onClick","setState","slidesPerView","spaceBetween","dangerouslySetInnerHTML","__html","el","React","Component","InfoWrap","info","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.705ddc7b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\n\r\n// CSS\r\nimport 'swiper/swiper-bundle.min.css'\r\nimport './css/tab.css'\r\nimport './css/card.css'\r\nimport './css/slide.css'\r\n\r\nclass CardWrap extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.sl = [\r\n      {\r\n        id: 1,\r\n        name: 'защищённые<br>инвестиции в Alibaba',\r\n        filter: 'one',\r\n        icon: 'icon',\r\n        color: 'swiper-slide-orange',\r\n        price: [\r\n          { id: 1, name: '3 мес.', subName: 'срок<br>размещения' },\r\n          { id: 2, name: 'от 300 000 ₽', subName: 'минимальная<br>сумма' },\r\n        ],\r\n        result: 10\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Нота №81<br>«Мультибарьер»',\r\n        filter: 'two',\r\n        icon: 'icon',\r\n        color: 'swiper-slide-black',\r\n        price: [\r\n          { id: 1, name: 'от 1 250 $', subName: 'минимальная<br>сумма' },\r\n          { id: 2, name: '5 лет', subName: 'срок<br>размещения' },\r\n        ],\r\n        result: 15\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 'защищённые<br>инвестиции в сбербанк',\r\n        filter: 'three',\r\n        icon: 'icon',\r\n        color: 'swiper-slide-green',\r\n        price: [\r\n          { id: 1, name: '3 мес.', subName: 'срок<br>размещения' },\r\n          { id: 2, name: 'от 300 000 ₽', subName: 'минимальная<br>сумма' },\r\n        ],\r\n        result: 10\r\n      }\r\n    ]\r\n\r\n    this.tab = [\r\n      { id: 1, name: 'Гарантированная доходность', filter: 'one' },\r\n      { id: 2, name: 'Регулярная доходность', filter: 'two' },\r\n      { id: 3, name: 'Ставка на рост', filter: 'three' }\r\n    ]\r\n\r\n    this.state = { filter: '' }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"container\">\r\n        <h2 className=\"title card-title\">Лучшие готовые инвестиционные решения</h2>\r\n\r\n        <div className='tab'>\r\n          {this.tab.map(arg => (\r\n            <div key={arg.id} onClick={() => this.setState({ filter: arg.filter })} className={arg.filter === this.state.filter ? 'tab__item active' : 'tab__item'}>\r\n              {arg.name}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"card\">\r\n          <Swiper slidesPerView={3} spaceBetween={16}>\r\n            {this.sl.map(arg => (\r\n              <SwiperSlide key={arg.id} className={arg.filter === this.state.filter ? 'active' : arg.color}>\r\n                <div className=\"card__body\">\r\n                  <div className=\"card__title\" dangerouslySetInnerHTML={{__html:arg.name}}></div>\r\n                  <div className=\"card__icon\">{arg.icon}</div>\r\n                  <div className=\"card__group\">\r\n                    { arg.price.map(el => (\r\n                      <div key={el.id} className=\"card__group_item\">\r\n                        <div className=\"card__group_title\">{el.name}</div>\r\n                        <div className=\"card__group_subTitle\" dangerouslySetInnerHTML={{__html:el.subName}}></div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                <div className=\"card__result\">\r\n                  <div className=\"card__result_title\">{ arg.result }%</div>\r\n                  <div className=\"card__result_subtitle\">максимальная  доходность</div>\r\n                </div>\r\n              </SwiperSlide>\r\n            ))}\r\n          </Swiper>\r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CardWrap","import React, { Component } from 'react'\r\nimport './css/index.css'\r\n\r\nclass InfoWrap extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.info = [\r\n      { id: 1, name: 'Возможность получать доход выше, чем по вкладу', icon: 'icon-1' },\r\n      { id: 2, name: 'Фиксированный срок инвестирования', icon: 'icon-2' },\r\n      { id: 3, name: 'Получите +13% к инвестициям ежегодно', icon: 'icon-3' },\r\n      { id: 4, name: 'Все инвестиции онлайн в одном приложении', icon: 'icon-4' }\r\n    ]\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"container\">\r\n        <div className=\"info\">\r\n          { this.info.map(arg => (\r\n            <div className=\"info__item\" key={arg.id}>\r\n              <div className=\"info__icon\">\r\n                <img src={`/assets/img/${arg.icon}.svg`} alt={arg.name} />\r\n              </div>\r\n              <div className=\"info__title\">\r\n                { arg.name }\r\n              </div>\r\n            </div>\r\n          )) }\r\n        </div>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default InfoWrap","import React, { Component } from 'react';\nimport CardWrao from './components/card/cardWrap'\nimport InfoWrap from './components/info/infoWrap'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <InfoWrap />\n        <CardWrao />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}